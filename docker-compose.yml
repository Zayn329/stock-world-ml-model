version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: financial_insights_db
    environment:
      POSTGRES_DB: financial_insights
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - financial_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: financial_insights_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - financial_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka for real-time data streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: financial_insights_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - financial_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: financial_insights_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - financial_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_insights_backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:password123@postgres:5432/financial_insights
      REDIS_URL: redis://redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      API_V1_PREFIX: /api/v1
      PROJECT_NAME: Financial Insights Platform
      DEBUG: "False"
      LOG_LEVEL: INFO
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
      - model_cache:/app/cache
      - model_data:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - financial_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: financial_insights_frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
      GENERATE_SOURCEMAP: "false"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - financial_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: financial_insights_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - financial_network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: financial_insights_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - financial_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: financial_insights_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - financial_network

  # Model training service (optional)
  model_trainer:
    build:
      context: ./backend
      dockerfile: Dockerfile.trainer
    container_name: financial_insights_trainer
    environment:
      DATABASE_URL: postgresql://postgres:password123@postgres:5432/financial_insights
      REDIS_URL: redis://redis:6379/0
      MODEL_PATH: /app/models
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
      - model_data:/app/models
      - training_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - financial_network
    profiles:
      - training
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  model_cache:
    driver: local
  model_data:
    driver: local
  training_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  financial_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16